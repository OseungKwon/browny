{"ast":null,"code":"import axios from 'axios';\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS } from '../types';\n\nconst loginUerAPI = loginData => {\n  console.log(loginData, \"loginData\");\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return axios.post('api/auth', loginData, config);\n};\n\nfunction* loginUser(action) {\n  try {\n    const result = yield call(loginUerAPI, action.payload);\n    console.log(result);\n    yield put({\n      type: LOGIN_SUCCESS,\n      payload: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOGIN_FAILURE,\n      payload: e.response\n    });\n  }\n}\n\nfunction* watchLoginUser() {\n  yield takeEvery(LOGIN_REQUEST, loginUser);\n} //로그아웃\n\n\nfunction* logout(action) {\n  try {\n    yield put({\n      type: LOGOUT_SUCCESS,\n      payload: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOGOUT_FAILURE,\n      payload: e.response\n    });\n  }\n\n  console.log(e);\n}\n\nfunction* watchLogout() {\n  yield takeEvery(LOGOUT_REQUEST, logout);\n}\n\nexport default function* authSaga() {\n  yield all([fork(watchLoginUser)]);\n}","map":{"version":3,"sources":["/Users/inhan/vscode-workspace/front/browny/client/src/redux/sagas/authSaga.js"],"names":["axios","all","call","fork","put","takeEvery","LOGIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGOUT_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","loginUerAPI","loginData","console","log","config","headers","post","loginUser","action","result","payload","type","data","e","response","watchLoginUser","logout","watchLogout","authSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,QAAgD,oBAAhD;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,aAAvC,EAAsDC,cAAtD,EAAsEC,cAAtE,EAAsFC,cAAtF,QAA4G,UAA5G;;AAEA,MAAMC,WAAW,GAAIC,SAAD,IAAc;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ,EAAuB,WAAvB;AACA,QAAMG,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf;AAKA,SAAOjB,KAAK,CAACkB,IAAN,CAAW,UAAX,EAAuBL,SAAvB,EAAkCG,MAAlC,CAAP;AACH,CARD;;AAUA,UAAUG,SAAV,CAAoBC,MAApB,EAA4B;AACxB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMnB,IAAI,CAACU,WAAD,EAAcQ,MAAM,CAACE,OAArB,CAAzB;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAYM,MAAZ;AACA,UAAMjB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEf,aADA;AAENc,MAAAA,OAAO,EAAED,MAAM,CAACG;AAFV,KAAD,CAAT;AAIH,GAPD,CAOE,OAAMC,CAAN,EAAS;AACP,UAAMrB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEjB,aADA;AAENgB,MAAAA,OAAO,EAAEG,CAAC,CAACC;AAFL,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUC,cAAV,GAA2B;AACvB,QAAMtB,SAAS,CAACE,aAAD,EAAgBY,SAAhB,CAAf;AACH,C,CAGD;;;AACA,UAAUS,MAAV,CAAiBR,MAAjB,EAAyB;AACrB,MAAI;AACA,UAAMhB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEZ,cADA;AAENW,MAAAA,OAAO,EAAED,MAAM,CAACG;AAFV,KAAD,CAAT;AAIH,GALD,CAKE,OAAMC,CAAN,EAAS;AACP,UAAMrB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEd,cADA;AAENa,MAAAA,OAAO,EAAEG,CAAC,CAACC;AAFL,KAAD,CAAT;AAIH;;AACDZ,EAAAA,OAAO,CAACC,GAAR,CAAYU,CAAZ;AACH;;AAED,UAAUI,WAAV,GAAwB;AACpB,QAAMxB,SAAS,CAACK,cAAD,EAAiBkB,MAAjB,CAAf;AACH;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAM7B,GAAG,CAAC,CACNE,IAAI,CAACwB,cAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import axios from 'axios';\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS } from '../types';\n\nconst loginUerAPI = (loginData) =>{\n    console.log(loginData, \"loginData\");\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n    return axios.post('api/auth', loginData, config);\n}\n\nfunction* loginUser(action) {\n    try {\n        const result = yield call(loginUerAPI, action.payload);\n        console.log(result);\n        yield put({\n            type: LOGIN_SUCCESS,\n            payload: result.data\n        })\n    } catch(e) {\n        yield put({\n            type: LOGIN_FAILURE,\n            payload: e.response\n        })\n    }\n}\n\nfunction* watchLoginUser() {\n    yield takeEvery(LOGIN_REQUEST, loginUser)\n}\n\n\n//로그아웃\nfunction* logout(action) {\n    try {\n        yield put({\n            type: LOGOUT_SUCCESS,\n            payload: result.data\n        })\n    } catch(e) {\n        yield put({\n            type: LOGOUT_FAILURE,\n            payload: e.response\n        })\n    }\n    console.log(e)\n}\n\nfunction* watchLogout() {\n    yield takeEvery(LOGOUT_REQUEST, logout)\n}\n\nexport default function* authSaga() {\n    yield all([\n        fork(watchLoginUser)\n    ])\n}"]},"metadata":{},"sourceType":"module"}